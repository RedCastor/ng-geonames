{"version":3,"sources":["geonames.js","geonamesData.js","geonamesDefaults.js","geonamesHelpers.js","search.js"],"names":["angular","module","factory","$log","$q","$http","geonamesHelpers","geonamesDefaults","isDefined","isString","egal","equals","query","geonamesId","defaults","getDefaults","url","server","max_rows","maxRows","postal_code","postalCode","country","username","df","defer","find","find_key","http_query","method","params","cancellable","q","postalcode","extend","callback","success","data","forEach","item","key_item","title","locationName","countryCode","placeName","name","countryName","this","push","resolve","reject","status","message","error","promise","window","service","getDefer","getUnresolvedDefer","setResolvedDefer","_private","self","upperFirst","string","charAt","toUpperCase","slice","_privateItems","itemName","unresolveGeonames","scopeId","id","obtainEffectiveGeonamesId","geonames","undefined","lObject","_getDefaults","isObject","reset","getGeonamesCreationDefaults","d","setDefaults","userDefaults","newDefaults","$timeout","_errorHeader","_isString","value","_isDefined","_isUndefined","_obtainEffectiveGeonamesId","i","Object","keys","length","hasOwnProperty","_getUnresolvedDefer","resolvedDefer","isTruthy","val","isEmpty","isUndefinedOrEmpty","isUndefined","isNumber","isArray","isFunction","directive","geonamesData","restrict","replace","scope","search","transclude","template","controller","$scope","_geonames","get","getScope","link","element","attrs","ctrl","setGeonames","$on","geonamesService","require","geonamesScope","geonamesController","errorHeader","then","lastGeonamesQuery","$watch","settingSearchFromGeonames","settingSearchFromScope","$broadcast","errMsg"],"mappings":"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","file":"ng-geonames.js","sourcesContent":["(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames').directive('geonames', [ '$q', 'geonamesData', 'geonamesDefaults', 'geonamesHelpers', function ($q, geonamesData, geonamesDefaults, geonamesHelpers) {\n    return {\n      restrict: \"AE\",\n      replace: false,\n      scope: {\n        defaults      : '=',\n        search         : '=',\n        id             : '@'\n      },\n      transclude: true,\n      template: '<div class=\"angular-geonames\"><div ng-transclude></div></div>',\n      controller: function ($scope) {\n        this._geonames = $q.defer();\n        this.get = function () {\n          return this._geonames.promise;\n        };\n\n        this.getScope = function() {\n          return $scope;\n        };\n      },\n\n      link: function(scope, element, attrs, ctrl) {\n        var isDefined = geonamesData.isDefined;\n        var defaults  = geonamesDefaults.setDefaults(scope.defaults, attrs.id);\n\n        scope.geonamesId =  attrs.id;\n\n        // Create the Geonames Object with the options\n        var geonames = geonamesDefaults.getGeonamesCreationDefaults(attrs.id);\n        ctrl._geonames.resolve(geonames);\n\n\n        // Resolve the geonames object to the promises\n        geonamesData.setGeonames(geonames, attrs.id);\n\n\n        scope.$on('$destroy', function () {\n          geonamesDefaults.reset();\n          geonamesData.unresolveGeonames(attrs.id);\n        });\n      }\n    };\n  }]);\n}(window.angular));","(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames').service('geonamesData', [ '$q', '$log', 'geonamesHelpers', function ($q, $log, geonamesHelpers) {\n    var getDefer = geonamesHelpers.getDefer,\n      getUnresolvedDefer = geonamesHelpers.getUnresolvedDefer,\n      setResolvedDefer = geonamesHelpers.setResolvedDefer;\n\n    var _private = {};\n    var self = this;\n\n    var upperFirst = function (string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    };\n\n    var _privateItems = [\n      'geonames'\n    ];\n\n    //init\n    _privateItems.forEach(function(itemName){\n      _private[itemName] = {};\n    });\n\n    this.unresolveGeonames = function (scopeId) {\n      var id = geonamesHelpers.obtainEffectiveGeonamesId(_private.geonames, scopeId);\n      _privateItems.forEach(function (itemName) {\n        _private[itemName][id] = undefined;\n      });\n    };\n\n    //int repetitive stuff (get and sets)\n    _privateItems.forEach(function (itemName) {\n      var name = upperFirst(itemName);\n      self['set' + name] = function (lObject, scopeId) {\n        var defer = getUnresolvedDefer(_private[itemName], scopeId);\n        defer.resolve(lObject);\n        setResolvedDefer(_private[itemName], scopeId);\n      };\n\n      self['get' + name] = function (scopeId) {\n        var defer = getDefer(_private[itemName], scopeId);\n        return defer.promise;\n      };\n    });\n  }]);\n}(window.angular));","(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames').factory('geonamesDefaults', [ '$q', 'geonamesHelpers', function ($q, geonamesHelpers) {\n\n    function _getDefaults() {\n      return {\n          server: 'http://api.geonames.org',\n          maxRows: 50,\n          postalCode: false,\n          country: [],\n          username: 'demo'\n      };\n    }\n\n    var isDefined = geonamesHelpers.isDefined,\n      isObject = geonamesHelpers.isObject,\n      obtainEffectiveGeonamesId = geonamesHelpers.obtainEffectiveGeonamesId,\n      defaults = {};\n\n    // Get the _defaults dictionary, and override the properties defined by the user\n    return {\n      reset: function () {\n        defaults = {};\n      },\n      getDefaults: function (scopeId) {\n        var geonamesId = obtainEffectiveGeonamesId(defaults, scopeId);\n        return defaults[geonamesId];\n      },\n\n      getGeonamesCreationDefaults: function (scopeId) {\n        var geonamesId = obtainEffectiveGeonamesId(defaults, scopeId);\n        var d = defaults[geonamesId];\n\n        var geonamesDefaults = {\n          server: d.server,\n          maxRows: d.maxRows,\n          postalCode: d.postalCode,\n          country: d.country,\n          username: d.username\n        };\n\n\n        return geonamesDefaults;\n      },\n\n      setDefaults: function (userDefaults, scopeId) {\n        var newDefaults = _getDefaults();\n\n        if (isDefined(userDefaults)) {\n          newDefaults.server = isDefined(userDefaults.server) ? userDefaults.server : newDefaults.server;\n          newDefaults.maxRows = isDefined(userDefaults.maxRows) ? userDefaults.maxRows : newDefaults.maxRows;\n          newDefaults.postalCode = isDefined(userDefaults.postalCode) ? userDefaults.postalCode : newDefaults.postalCode;\n          newDefaults.country = isDefined(userDefaults.country) ? userDefaults.country : newDefaults.country;\n          newDefaults.username = isDefined(userDefaults.username) ? userDefaults.username : newDefaults.username;\n        }\n\n        var geonamesId = obtainEffectiveGeonamesId(defaults, scopeId);\n        defaults[geonamesId] = newDefaults;\n        return newDefaults;\n      }\n    };\n  }]);\n}(window.angular));\n","(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames').service('geonamesHelpers', [ '$q', '$log', '$timeout', function ($q, $log, $timeout) {\n\n    var _errorHeader = '[ng-geonames] ';\n\n    var _isString = function(value) {\n      return angular.isString(value) && value !== '';\n    };\n    var _isDefined = function(value) {\n      return angular.isDefined(value) && value !== null;\n    };\n    var _isUndefined = function(value){\n      return !_isDefined(value);\n    };\n\n    function _obtainEffectiveGeonamesId(d, geonamesId) {\n      var id, i;\n      if (!angular.isDefined(geonamesId)) {\n        if (Object.keys(d).length === 0) {\n          id = \"main\";\n        } else if (Object.keys(d).length >= 1) {\n          for (i in d) {\n            if (d.hasOwnProperty(i)) {\n              id = i;\n            }\n          }\n        } else {\n          $log.error(_errorHeader + \"- You have more than 1 geonames on the DOM, you must provide the geonames ID to the geonamesData.getXXX call\");\n        }\n      } else {\n        id = geonamesId;\n      }\n\n      return id;\n    }\n\n    function _getUnresolvedDefer(d, geonamesId) {\n      var id = _obtainEffectiveGeonamesId(d, geonamesId),\n        defer;\n\n      if (!angular.isDefined(d[id]) || d[id].resolvedDefer === true) {\n        defer = $q.defer();\n        d[id] = {\n          defer: defer,\n          resolvedDefer: false\n        };\n      } else {\n        defer = d[id].defer;\n      }\n\n      return defer;\n    }\n\n\n    return {\n      //mainly for checking attributes of directives lets keep this minimal (on what we accept)\n      isTruthy: function(val){\n        return val === 'true' || val === true;\n      },\n      //Determine if a reference is {}\n      isEmpty: function(value) {\n        return Object.keys(value).length === 0;\n      },\n\n      //Determine if a reference is undefined or {}\n      isUndefinedOrEmpty: function (value) {\n        return (angular.isUndefined(value) || value === null) || Object.keys(value).length === 0;\n      },\n\n      // Determine if a reference is defined\n      isDefined: _isDefined,\n      isUndefined:_isUndefined,\n      isNumber: angular.isNumber,\n      isString: _isString,\n      isArray: angular.isArray,\n      isObject: angular.isObject,\n      isFunction: angular.isFunction,\n      equals: angular.equals,\n\n      getUnresolvedDefer: _getUnresolvedDefer,\n\n      setResolvedDefer: function(d, geonamesId) {\n        var id = _obtainEffectiveGeonamesId(d, geonamesId);\n        d[id].resolvedDefer = true;\n      },\n\n      obtainEffectiveGeonamesId: _obtainEffectiveGeonamesId\n    };\n  }]);\n}(window.angular));","(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames').directive('search', [ '$log', '$timeout', '$http', 'geonamesHelpers', 'geonamesService', function ($log, $timeout, $http, geonamesHelpers, geonamesService) {\n    return {\n      restrict: \"A\",\n      scope: false,\n      replace: false,\n      require: [ 'geonames' ],\n\n      link: function (scope, element, attrs, controller) {\n\n        var isDefined = geonamesHelpers.isDefined;\n        var isString = geonamesHelpers.isString;\n\n        var geonamesScope = controller[0].getScope();\n        var geonamesController = controller[0];\n        var errorHeader = '[ng-geonames] ' + ' [Search] ';\n\n        geonamesController.get().then(function (geonames) {\n\n          var lastGeonamesQuery;\n\n          geonamesScope.$watch('search', function (search) {\n            if (scope.settingSearchFromGeonames) {\n              return;\n            }\n\n            if ( isDefined(search.q) && isString(search.q) && search.q !== '' && search.q !== lastGeonamesQuery ) {\n\n              scope.settingSearchFromScope = true;\n\n              scope.$broadcast('geonamesDirectiveSearch.find_start');\n\n              geonamesService.query(search, attrs.id).then(function (data) {\n                search.find = data;\n                scope.$broadcast('geonamesDirectiveSearch.find_end', data);\n              }, function (errMsg) {\n                search.find = [];\n                scope.$broadcast('geonamesDirectiveSearch.find_end', []);\n                $log.error(errorHeader + ' ' + errMsg + '.');\n              });\n\n              lastGeonamesQuery = search.q;\n\n              $timeout(function () {\n                scope.settingSearchFromScope = false;\n              });\n              return;\n            }\n\n          }, true);\n        });\n      }\n    };\n  }]);\n}(window.angular));\n"],"sourceRoot":"dist"}