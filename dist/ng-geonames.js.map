{"version":3,"sources":["directives/geonames.js","directives/search.js","services/geonames.js","services/geonamesData.js","services/geonamesDefaults.js","services/geonamesHelpers.js"],"names":["angular","module","directive","$q","geonamesData","geonamesDefaults","geonamesHelpers","restrict","replace","scope","defaults","search","id","transclude","template","controller","$scope","this","_geonames","defer","get","promise","getScope","link","element","attrs","ctrl","isDefined","setDefaults","geonamesId","geonames","getGeonamesCreationDefaults","resolve","setGeonames","$on","reset","unresolveGeonames","window","$log","$timeout","$http","geonamesService","require","isString","geonamesScope","geonamesController","errorHeader","then","lastGeonamesQuery","$watch","settingSearchFromGeonames","q","settingSearchFromScope","$broadcast","query","data","find","errMsg","error","factory","egal","equals","getDefaults","url","server","max_rows","maxRows","postal_code","postalCode","country","username","df","find_key","http_query","method","params","cancellable","postalcode","extend","callback","success","forEach","item","key_item","title","locationName","countryCode","placeName","name","countryName","push","reject","status","message","service","getDefer","getUnresolvedDefer","setResolvedDefer","_private","self","upperFirst","string","charAt","toUpperCase","slice","_privateItems","itemName","scopeId","obtainEffectiveGeonamesId","undefined","lObject","_getDefaults","isObject","d","userDefaults","newDefaults","_errorHeader","_isString","value","_isDefined","_isUndefined","_obtainEffectiveGeonamesId","i","Object","keys","length","hasOwnProperty","_getUnresolvedDefer","resolvedDefer","isTruthy","val","isEmpty","isUndefinedOrEmpty","isUndefined","isNumber","isArray","isFunction"],"mappings":"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","file":"ng-geonames.js","sourcesContent":["(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames', []).directive('geonames', [ '$q', 'geonamesData', 'geonamesDefaults', 'geonamesHelpers', function ($q, geonamesData, geonamesDefaults, geonamesHelpers) {\n    return {\n      restrict: \"AE\",\n      replace: false,\n      scope: {\n        defaults      : '=',\n        search         : '=',\n        id             : '@'\n      },\n      transclude: true,\n      template: '<div class=\"angular-geonames\"><div ng-transclude></div></div>',\n      controller: function ($scope) {\n        this._geonames = $q.defer();\n        this.get = function () {\n          return this._geonames.promise;\n        };\n\n        this.getScope = function() {\n          return $scope;\n        };\n      },\n\n      link: function(scope, element, attrs, ctrl) {\n        var isDefined = geonamesData.isDefined;\n        var defaults  = geonamesDefaults.setDefaults(scope.defaults, attrs.id);\n\n        scope.geonamesId =  attrs.id;\n\n        // Create the Geonames Object with the options\n        var geonames = geonamesDefaults.getGeonamesCreationDefaults(attrs.id);\n        ctrl._geonames.resolve(geonames);\n\n\n        // Resolve the geonames object to the promises\n        geonamesData.setGeonames(geonames, attrs.id);\n\n\n        scope.$on('$destroy', function () {\n          geonamesDefaults.reset();\n          geonamesData.unresolveGeonames(attrs.id);\n        });\n      }\n    };\n  }]);\n}(window.angular));","(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames').directive('search', [ '$log', '$timeout', '$http', 'geonamesHelpers', 'geonamesService', function ($log, $timeout, $http, geonamesHelpers, geonamesService) {\n    return {\n      restrict: \"A\",\n      scope: false,\n      replace: false,\n      require: [ 'geonames' ],\n\n      link: function (scope, element, attrs, controller) {\n\n        var isDefined = geonamesHelpers.isDefined;\n        var isString = geonamesHelpers.isString;\n\n        var geonamesScope = controller[0].getScope();\n        var geonamesController = controller[0];\n        var errorHeader = '[ng-geonames] ' + ' [Search] ';\n\n        geonamesController.get().then(function (geonames) {\n\n          var lastGeonamesQuery;\n\n          geonamesScope.$watch('search', function (search) {\n            if (scope.settingSearchFromGeonames) {\n              return;\n            }\n\n            if ( isDefined(search.q) && isString(search.q) && search.q !== '' && search.q !== lastGeonamesQuery ) {\n\n              scope.settingSearchFromScope = true;\n\n              scope.$broadcast('geonamesDirectiveSearch.find_start');\n\n              geonamesService.query(search, attrs.id).then(function (data) {\n                search.find = data;\n                scope.$broadcast('geonamesDirectiveSearch.find_end', data);\n              }, function (errMsg) {\n                search.find = [];\n                scope.$broadcast('geonamesDirectiveSearch.find_end', []);\n                $log.error(errorHeader + ' ' + errMsg + '.');\n              });\n\n              lastGeonamesQuery = search.q;\n\n              $timeout(function () {\n                scope.settingSearchFromScope = false;\n              });\n              return;\n            }\n\n          }, true);\n        });\n      }\n    };\n  }]);\n}(window.angular));\n","(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames').factory('geonamesService', [ '$log', '$q', '$http', 'geonamesHelpers', 'geonamesDefaults', function ($log, $q, $http, geonamesHelpers, geonamesDefaults) {\n    var isDefined = geonamesHelpers.isDefined;\n    var isString = angular.isString;\n    var egal = geonamesHelpers.equals;\n\n    return {\n      query: function(query, geonamesId) {\n        var defaults = geonamesDefaults.getDefaults(geonamesId);\n        var url = defaults.server;\n        var max_rows = defaults.maxRows;\n        var postal_code = defaults.postalCode;\n        var country = defaults.country;\n        var username = defaults.username;\n        var df = $q.defer();\n        var find = [];\n        var find_key = null;\n\n        var http_query = {\n          method: 'JSONP',\n          url: url,\n          params: {},\n          cancellable: true\n        } ;\n\n        //Set query params\n        if(isDefined(query.q) && isString(query.q) && query.q !== '') {\n          if( postal_code === true ) {\n            http_query.url += '/postalCodeLookupJSON';\n            http_query.params.postalcode = query.q;\n            find_key = 'postalcodes';\n          }\n          else {\n            http_query.url += '/searchJSON';\n            http_query.params.q = query.q;\n            find_key = 'geonames';\n          }\n\n          if( isDefined(query.country) && isString(query.country) && query.country !== ''  ) {\n            country = query.country;\n          }\n        }\n\n        if ( isDefined(http_query.params) && !egal({}, http_query.params) ) {\n          angular.extend(http_query.params, {\n            maxRows: max_rows,\n            country: country,\n            username: username,\n            callback: 'JSON_CALLBACK'\n          });\n\n          $http(http_query).success(function(data) {\n            if (isDefined(data[find_key])) {\n              angular.forEach(data[find_key], function (item, key_item) {\n                switch (find_key) {\n                  case 'postalcodes':\n                    if (!isDefined(item.title)){\n                      item.title = '[' + item.postalcode + '] ';\n                    }\n                    if (!isDefined(item.locationName)){\n                      item.locationName = item.countryCode + ' ' + item.placeName;\n                    }\n                    break;\n                  case 'geonames':\n                    if (!isDefined(item.title)){\n                      item.title = item.name;\n                    }\n                    if (!isDefined(item.locationName)){\n                      item.locationName = item.countryName;\n                    }\n                    break;\n                }\n\n                this.push(item);\n              }, find);\n\n\n              df.resolve(find);\n            } else {\n              df.reject('[Geonames] Invalid query: ' + data.status.message);\n            }\n          });\n        }\n        else {\n          df.reject('[Geonames] Invalid query params');\n          $log.error(http_query);\n        }\n\n        return df.promise;\n      }\n    };\n  }]);\n}(window.angular));\n","(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames').service('geonamesData', [ '$q', '$log', 'geonamesHelpers', function ($q, $log, geonamesHelpers) {\n    var getDefer = geonamesHelpers.getDefer,\n      getUnresolvedDefer = geonamesHelpers.getUnresolvedDefer,\n      setResolvedDefer = geonamesHelpers.setResolvedDefer;\n\n    var _private = {};\n    var self = this;\n\n    var upperFirst = function (string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    };\n\n    var _privateItems = [\n      'geonames'\n    ];\n\n    //init\n    _privateItems.forEach(function(itemName){\n      _private[itemName] = {};\n    });\n\n    this.unresolveGeonames = function (scopeId) {\n      var id = geonamesHelpers.obtainEffectiveGeonamesId(_private.geonames, scopeId);\n      _privateItems.forEach(function (itemName) {\n        _private[itemName][id] = undefined;\n      });\n    };\n\n    //int repetitive stuff (get and sets)\n    _privateItems.forEach(function (itemName) {\n      var name = upperFirst(itemName);\n      self['set' + name] = function (lObject, scopeId) {\n        var defer = getUnresolvedDefer(_private[itemName], scopeId);\n        defer.resolve(lObject);\n        setResolvedDefer(_private[itemName], scopeId);\n      };\n\n      self['get' + name] = function (scopeId) {\n        var defer = getDefer(_private[itemName], scopeId);\n        return defer.promise;\n      };\n    });\n  }]);\n}(window.angular));","(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames').factory('geonamesDefaults', [ '$q', 'geonamesHelpers', function ($q, geonamesHelpers) {\n\n    function _getDefaults() {\n      return {\n          server: 'http://api.geonames.org',\n          maxRows: 50,\n          postalCode: false,\n          country: [],\n          username: 'demo'\n      };\n    }\n\n    var isDefined = geonamesHelpers.isDefined,\n      isObject = geonamesHelpers.isObject,\n      obtainEffectiveGeonamesId = geonamesHelpers.obtainEffectiveGeonamesId,\n      defaults = {};\n\n    // Get the _defaults dictionary, and override the properties defined by the user\n    return {\n      reset: function () {\n        defaults = {};\n      },\n      getDefaults: function (scopeId) {\n        var geonamesId = obtainEffectiveGeonamesId(defaults, scopeId);\n        return defaults[geonamesId];\n      },\n\n      getGeonamesCreationDefaults: function (scopeId) {\n        var geonamesId = obtainEffectiveGeonamesId(defaults, scopeId);\n        var d = defaults[geonamesId];\n\n        var geonamesDefaults = {\n          server: d.server,\n          maxRows: d.maxRows,\n          postalCode: d.postalCode,\n          country: d.country,\n          username: d.username\n        };\n\n\n        return geonamesDefaults;\n      },\n\n      setDefaults: function (userDefaults, scopeId) {\n        var newDefaults = _getDefaults();\n\n        if (isDefined(userDefaults)) {\n          newDefaults.server = isDefined(userDefaults.server) ? userDefaults.server : newDefaults.server;\n          newDefaults.maxRows = isDefined(userDefaults.maxRows) ? userDefaults.maxRows : newDefaults.maxRows;\n          newDefaults.postalCode = isDefined(userDefaults.postalCode) ? userDefaults.postalCode : newDefaults.postalCode;\n          newDefaults.country = isDefined(userDefaults.country) ? userDefaults.country : newDefaults.country;\n          newDefaults.username = isDefined(userDefaults.username) ? userDefaults.username : newDefaults.username;\n        }\n\n        var geonamesId = obtainEffectiveGeonamesId(defaults, scopeId);\n        defaults[geonamesId] = newDefaults;\n        return newDefaults;\n      }\n    };\n  }]);\n}(window.angular));\n","(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames').service('geonamesHelpers', [ '$q', '$log', '$timeout', function ($q, $log, $timeout) {\n\n    var _errorHeader = '[ng-geonames] ';\n\n    var _isString = function(value) {\n      return angular.isString(value) && value !== '';\n    };\n    var _isDefined = function(value) {\n      return angular.isDefined(value) && value !== null;\n    };\n    var _isUndefined = function(value){\n      return !_isDefined(value);\n    };\n\n    function _obtainEffectiveGeonamesId(d, geonamesId) {\n      var id, i;\n      if (!angular.isDefined(geonamesId)) {\n        if (Object.keys(d).length === 0) {\n          id = \"main\";\n        } else if (Object.keys(d).length >= 1) {\n          for (i in d) {\n            if (d.hasOwnProperty(i)) {\n              id = i;\n            }\n          }\n        } else {\n          $log.error(_errorHeader + \"- You have more than 1 geonames on the DOM, you must provide the geonames ID to the geonamesData.getXXX call\");\n        }\n      } else {\n        id = geonamesId;\n      }\n\n      return id;\n    }\n\n    function _getUnresolvedDefer(d, geonamesId) {\n      var id = _obtainEffectiveGeonamesId(d, geonamesId),\n        defer;\n\n      if (!angular.isDefined(d[id]) || d[id].resolvedDefer === true) {\n        defer = $q.defer();\n        d[id] = {\n          defer: defer,\n          resolvedDefer: false\n        };\n      } else {\n        defer = d[id].defer;\n      }\n\n      return defer;\n    }\n\n\n    return {\n      //mainly for checking attributes of directives lets keep this minimal (on what we accept)\n      isTruthy: function(val){\n        return val === 'true' || val === true;\n      },\n      //Determine if a reference is {}\n      isEmpty: function(value) {\n        return Object.keys(value).length === 0;\n      },\n\n      //Determine if a reference is undefined or {}\n      isUndefinedOrEmpty: function (value) {\n        return (angular.isUndefined(value) || value === null) || Object.keys(value).length === 0;\n      },\n\n      // Determine if a reference is defined\n      isDefined: _isDefined,\n      isUndefined:_isUndefined,\n      isNumber: angular.isNumber,\n      isString: _isString,\n      isArray: angular.isArray,\n      isObject: angular.isObject,\n      isFunction: angular.isFunction,\n      equals: angular.equals,\n\n      getUnresolvedDefer: _getUnresolvedDefer,\n\n      setResolvedDefer: function(d, geonamesId) {\n        var id = _obtainEffectiveGeonamesId(d, geonamesId);\n        d[id].resolvedDefer = true;\n      },\n\n      obtainEffectiveGeonamesId: _obtainEffectiveGeonamesId\n    };\n  }]);\n}(window.angular));"],"sourceRoot":"dist"}