{"version":3,"sources":["geonamesHelpers.js","geonamesDefaults.js","geonamesData.js","geonames.js","search.js"],"names":["angular","module","service","$q","$log","$timeout","_errorHeader","_isString","value","isString","_isDefined","isDefined","_isUndefined","_obtainEffectiveGeonamesId","d","geonamesId","id","i","Object","keys","length","hasOwnProperty","error","_getUnresolvedDefer","defer","resolvedDefer","isTruthy","val","isEmpty","isUndefinedOrEmpty","isUndefined","isNumber","isArray","isObject","isFunction","equals","getUnresolvedDefer","setResolvedDefer","obtainEffectiveGeonamesId","window","factory","geonamesHelpers","_getDefaults","server","maxRows","postalCode","country","username","defaults","reset","scopeId","getDefaults","getGeonamesCreationDefaults","geonamesDefaults","setDefaults","userDefaults","newDefaults","getDefer","_private","self","this","upperFirst","string","charAt","toUpperCase","slice","_privateItems","forEach","itemName","unresolveGeonames","geonames","undefined","name","lObject","resolve","promise","$sce","$http","egal","query","url","max_rows","postal_code","df","find","find_key","http_query","method","params","cancellable","q","postalcode","extend","jsonpCallbackParam","trustAsResourceUrl","then","response_success","data","item","key_item","title","locationName","countryCode","placeName","countryName","push","reject","status","statusText","warn","response_error","directive","geonamesData","restrict","replace","scope","search","transclude","template","controller","$scope","_geonames","getGeonames","getScope","link","element","attrs","ctrl","setGeonames","$on","geonamesService","require","geonamesScope","geonamesController","errorHeader","lastGeonamesQuery","$watch","settingSearchFromGeonames","settingSearchFromScope","$broadcast","errMsg"],"mappings":"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","file":"ng-geonames.js","sourcesContent":["(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames', []).service('geonamesHelpers', [ '$q', '$log', '$timeout', function ($q, $log, $timeout) {\n\n    var _errorHeader = '[ng-geonames] ';\n\n    var _isString = function(value) {\n      return angular.isString(value) && value !== '';\n    };\n    var _isDefined = function(value) {\n      return angular.isDefined(value) && value !== null;\n    };\n    var _isUndefined = function(value){\n      return !_isDefined(value);\n    };\n\n    function _obtainEffectiveGeonamesId(d, geonamesId) {\n      var id, i;\n      if (!angular.isDefined(geonamesId)) {\n        if (Object.keys(d).length === 0) {\n          id = \"mainGeonames\";\n        } else if (Object.keys(d).length >= 1) {\n          for (i in d) {\n            if (d.hasOwnProperty(i)) {\n              id = i;\n            }\n          }\n        } else {\n          $log.error(_errorHeader + \"- You have more than 1 geonames on the DOM, you must provide the geonames ID to the geonamesData.getXXX call\");\n        }\n      } else {\n        id = geonamesId;\n      }\n\n      return id;\n    }\n\n    function _getUnresolvedDefer(d, geonamesId) {\n      var id = _obtainEffectiveGeonamesId(d, geonamesId),\n        defer;\n\n      if (!angular.isDefined(d[id]) || d[id].resolvedDefer === true) {\n        defer = $q.defer();\n        d[id] = {\n          defer: defer,\n          resolvedDefer: false\n        };\n      } else {\n        defer = d[id].defer;\n      }\n\n      return defer;\n    }\n\n\n    return {\n      //mainly for checking attributes of directives lets keep this minimal (on what we accept)\n      isTruthy: function(val){\n        return val === 'true' || val === true;\n      },\n      //Determine if a reference is {}\n      isEmpty: function(value) {\n        return Object.keys(value).length === 0;\n      },\n\n      //Determine if a reference is undefined or {}\n      isUndefinedOrEmpty: function (value) {\n        return (angular.isUndefined(value) || value === null) || Object.keys(value).length === 0;\n      },\n\n      // Determine if a reference is defined\n      isDefined: _isDefined,\n      isUndefined:_isUndefined,\n      isNumber: angular.isNumber,\n      isString: _isString,\n      isArray: angular.isArray,\n      isObject: angular.isObject,\n      isFunction: angular.isFunction,\n      equals: angular.equals,\n\n      getUnresolvedDefer: _getUnresolvedDefer,\n\n      setResolvedDefer: function(d, geonamesId) {\n        var id = _obtainEffectiveGeonamesId(d, geonamesId);\n        d[id].resolvedDefer = true;\n      },\n\n      obtainEffectiveGeonamesId: _obtainEffectiveGeonamesId\n    };\n  }]);\n}(window.angular));","(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames').factory('geonamesDefaults', [ '$q', 'geonamesHelpers', function ($q, geonamesHelpers) {\n\n    function _getDefaults() {\n      return {\n          server: 'http://api.geonames.org',\n          maxRows: 50,\n          postalCode: false,\n          country: [],\n          username: 'demo'\n      };\n    }\n\n    var isDefined = geonamesHelpers.isDefined,\n      isObject = geonamesHelpers.isObject,\n      obtainEffectiveGeonamesId = geonamesHelpers.obtainEffectiveGeonamesId,\n      defaults = {};\n\n    // Get the _defaults dictionary, and override the properties defined by the user\n    return {\n      reset: function (scopeId) {\n        var geonamesId = obtainEffectiveGeonamesId(defaults, scopeId);\n        if (geonamesId !== 'mainGeonames') {\n          delete defaults[geonamesId];\n        }\n      },\n      getDefaults: function (scopeId) {\n        var geonamesId = obtainEffectiveGeonamesId(defaults, scopeId);\n        return defaults[geonamesId];\n      },\n\n      getGeonamesCreationDefaults: function (scopeId) {\n        var geonamesId = obtainEffectiveGeonamesId(defaults, scopeId);\n        var d = defaults[geonamesId];\n\n        var geonamesDefaults = {\n          server: d.server,\n          maxRows: d.maxRows,\n          postalCode: d.postalCode,\n          country: d.country,\n          username: d.username\n        };\n\n\n        return geonamesDefaults;\n      },\n\n      setDefaults: function (userDefaults, scopeId) {\n        var newDefaults = _getDefaults();\n\n        if (isDefined(userDefaults)) {\n          newDefaults.server = isDefined(userDefaults.server) ? userDefaults.server : newDefaults.server;\n          newDefaults.maxRows = isDefined(userDefaults.maxRows) ? userDefaults.maxRows : newDefaults.maxRows;\n          newDefaults.postalCode = isDefined(userDefaults.postalCode) ? userDefaults.postalCode : newDefaults.postalCode;\n          newDefaults.country = isDefined(userDefaults.country) ? userDefaults.country : newDefaults.country;\n          newDefaults.username = isDefined(userDefaults.username) ? userDefaults.username : newDefaults.username;\n        }\n\n        var geonamesId = obtainEffectiveGeonamesId(defaults, scopeId);\n        defaults[geonamesId] = newDefaults;\n        return newDefaults;\n      }\n    };\n  }]);\n}(window.angular));\n","(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames').service('geonamesData', [ '$q', '$log', 'geonamesHelpers', function ($q, $log, geonamesHelpers) {\n    var getDefer = geonamesHelpers.getDefer,\n      getUnresolvedDefer = geonamesHelpers.getUnresolvedDefer,\n      setResolvedDefer = geonamesHelpers.setResolvedDefer;\n\n    var _private = {};\n    var self = this;\n\n    var upperFirst = function (string) {\n      return string.charAt(0).toUpperCase() + string.slice(1);\n    };\n\n    var _privateItems = [\n      'geonames'\n    ];\n\n    //init\n    _privateItems.forEach(function(itemName){\n      _private[itemName] = {};\n    });\n\n    this.unresolveGeonames = function (scopeId) {\n      var id = geonamesHelpers.obtainEffectiveGeonamesId(_private.geonames, scopeId);\n      _privateItems.forEach(function (itemName) {\n        _private[itemName][id] = undefined;\n      });\n    };\n\n    //int repetitive stuff (get and sets)\n    _privateItems.forEach(function (itemName) {\n      var name = upperFirst(itemName);\n      self['set' + name] = function (lObject, scopeId) {\n        var defer = getUnresolvedDefer(_private[itemName], scopeId);\n        defer.resolve(lObject);\n        setResolvedDefer(_private[itemName], scopeId);\n      };\n\n      self['get' + name] = function (scopeId) {\n        var defer = getDefer(_private[itemName], scopeId);\n        return defer.promise;\n      };\n    });\n  }]);\n}(window.angular));","(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames').directive('geonames', [ '$q', 'geonamesData', 'geonamesDefaults', 'geonamesHelpers', function ($q, geonamesData, geonamesDefaults, geonamesHelpers) {\n    return {\n      restrict: \"AE\",\n      replace: false,\n      scope: {\n        defaults      : '=',\n        search         : '=',\n        id             : '@'\n      },\n      transclude: true,\n      template: '<div class=\"angular-geonames\"><div ng-transclude></div></div>',\n      controller: function ($scope) {\n        this._geonames = $q.defer();\n        this.getGeonames = function () {\n          return this._geonames.promise;\n        };\n\n        this.getScope = function() {\n          return $scope;\n        };\n      },\n\n      link: function(scope, element, attrs, ctrl) {\n        var isDefined = geonamesData.isDefined;\n        var defaults  = geonamesDefaults.setDefaults(scope.defaults, attrs.id);\n\n        scope.geonamesId =  attrs.id;\n\n        // Create the Geonames Object with the options\n        var geonames = geonamesDefaults.getGeonamesCreationDefaults(attrs.id);\n        ctrl._geonames.resolve(geonames);\n\n\n        // Resolve the geonames object to the promises\n        geonamesData.setGeonames(geonames, attrs.id);\n\n\n        scope.$on('$destroy', function () {\n          geonamesDefaults.reset(attrs.id);\n          geonamesData.unresolveGeonames(attrs.id);\n        });\n      }\n    };\n  }]);\n}(window.angular));","(function (angular) {\n  'use strict';\n\n  angular.module('ngGeonames').directive('search', [ '$log', '$timeout', '$http', 'geonamesHelpers', 'geonamesService', function ($log, $timeout, $http, geonamesHelpers, geonamesService) {\n    return {\n      restrict: \"A\",\n      scope: false,\n      replace: false,\n      require: [ 'geonames' ],\n\n      link: function (scope, element, attrs, controller) {\n\n        var isDefined = geonamesHelpers.isDefined;\n        var isString = geonamesHelpers.isString;\n\n        var geonamesScope = controller[0].getScope();\n        var geonamesController = controller[0];\n        var errorHeader = '[ng-geonames] ' + ' [Search] ';\n\n        geonamesController.getGeonames().then(function (geonames) {\n\n          var lastGeonamesQuery;\n\n          geonamesScope.$watch('search', function (search) {\n            if (scope.settingSearchFromGeonames) {\n              return;\n            }\n\n            if ( isDefined(search.q) && isString(search.q) && search.q !== '' && search.q !== lastGeonamesQuery ) {\n\n              scope.settingSearchFromScope = true;\n\n              scope.$broadcast('geonamesDirectiveSearch.find_start');\n\n              geonamesService.query(search, attrs.id).then(function (data) {\n                search.find = data;\n                scope.$broadcast('geonamesDirectiveSearch.find_end', data);\n              }, function (errMsg) {\n                search.find = [];\n                scope.$broadcast('geonamesDirectiveSearch.find_end', []);\n                $log.error(errorHeader + ' ' + errMsg + '.');\n              });\n\n              lastGeonamesQuery = search.q;\n\n              $timeout(function () {\n                scope.settingSearchFromScope = false;\n              });\n              return;\n            }\n\n          }, true);\n        });\n      }\n    };\n  }]);\n}(window.angular));\n"],"sourceRoot":"dist"}